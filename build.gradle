plugins {
    id 'java'
    id 'maven'
    id 'idea'
    id 'eclipse'
    id 'maven-publish'
}

group = 'uk.ac.ebi.ena.sra'
archivesBaseName = 'sra-xml'
version = '1.19.0'

sourceCompatibility = 1.6
targetCompatibility = 1.6
ext.gitlab_project_id = '3209'

wrapper{
    gradleVersion = '5.6.4'
}

repositories {
    mavenLocal()

    maven {
        // Group level (enasequence) maven artifactory.
        url "https://gitlab.ebi.ac.uk/api/v4/groups/enasequence/-/packages/maven"

        credentials(HttpHeaderCredentials) {
            name = "Private-Token"
            value = project.ext.properties.gitlab_private_token
        }
        authentication {
            header(HttpHeaderAuthentication)
        }
    }

    mavenCentral()
}

dependencies {
    compile 'org.apache.xmlbeans:xmlbeans:2.5.0'
    testCompile 'junit:junit:4.12'
    testCompile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.6.2'
    testCompile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.6.2'
}

idea {
    module {
        sourceDirs += sourceSets.main.output.classesDirs
    }
}

task printClasspath  {
    configurations.testCompile.each { println it }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
            include '**/SRA*.xsd'
            include '**/ENA*.xsd'
            include '**/EGA*.xsd'
            exclude '**/ENA.embl.xsd'
            exclude '**/ENA.root.xsd'
        }
    }
    generated {
        java
        output.resourcesDir = sourceSets.main.output.resourcesDir
        compileClasspath += sourceSets.main.runtimeClasspath
    }
}

task classes (overwrite: true)  {
}

task printSources  {
    sourceSets.main.allSource.files.each {File file ->
        println file
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier  = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.generated.allSource
    archiveClassifier  = 'sources'
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

install {
    configuration = configurations.runtime
}

task generateXMLBeanSources (overwrite: true) {
    doLast{
        delete "src/generated/java"
        ant.taskdef(name:'xmlbean', classname: 'org.apache.xmlbeans.impl.tool.XMLBean', classpath: configurations.compile.asPath)
        sourceSets.main.resources.files.each {File file ->
            ant.xmlbean(schema: file.path, classgendir: "build/classes/java/main" , srcgendir: "src/generated/java", classpath: configurations.compile.asPath) {
                fileset(dir: file.parentFile) {
                    include(name: '*.xsdconfig')
                }
            }
        }
    }
}

compileGeneratedJava.dependsOn generateXMLBeanSources
compileTestJava.dependsOn compileGeneratedJava
jar.dependsOn compileGeneratedJava

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
        }
    }
    repositories {
        maven {
            // Project specific maven repository in Gitlab.
            url "https://gitlab.ebi.ac.uk/api/v4/projects/${gitlab_project_id}/packages/maven"
            // Developer token in Gitlab.
            credentials(HttpHeaderCredentials) {
                name = "Private-Token"
                value = project.ext.properties.gitlab_private_token
            }
            authentication {
                header(HttpHeaderAuthentication)
            }
        }
    }
}

test {
    maxHeapSize = "1024m"
    jvmArgs "-Dfile.encoding=UTF-8"
    testLogging {
        events "failed", "standardOut", "standardError"
    }
}

publish.dependsOn build
